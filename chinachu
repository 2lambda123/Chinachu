#!/bin/bash

# Chinachu-CLI
# ------------
#
#   Usage:
#
#     ./chinachu <cmd> ...
#

if [ -z "$BASH" ]; then
  echo "Chinachu-CLI only works with bash.  Sorry." >&2
  exit 1
fi

shopt -s extglob

# variables
NODE_VER=0.8.7

main () {
  local SELF_PATH DIR SYM
  # get the absolute path of the executable
  SELF_PATH="$0"
  if [ "${SELF_PATH:0:1}" != "." ] && [ "${SELF_PATH:0:1}" != "/" ]; then
    SELF_PATH=./"$SELF_PATH"
  fi
  SELF_PATH=$( cd -P -- "$(dirname -- "$SELF_PATH")" \
            && pwd -P \
            ) && SELF_PATH=$SELF_PATH/$(basename -- "$0")
  
  # resolve symlinks
  while [ -h "$SELF_PATH" ]; do
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink -- "$SELF_PATH")
    SELF_PATH=$( cd -- "$DIR" \
              && cd -- $(dirname -- "$SYM") \
              && pwd \
              )/$(basename -- "$SYM")
  done
  
  # path
  CHINACHU_DIR=$(dirname -- "$SELF_PATH")
  NAVE_DIR=${CHINACHU_DIR}/.nave
  NODE_PATH=${NAVE_DIR}/installed/${NODE_VER}/bin/node
  
  cd $CHINACHU_DIR
  
  export CHINACHU_DIR
  export NAVE_DIR
  
  local cmd="$1"
  shift
  case $cmd in
    installer | service )
      cmd="chinachu_$cmd"
      ;;
    * )
      cmd="chinachu_help"
      ;;
  esac
  $cmd "$@" && exit 0 || fail "failed somehow"
}

chinachu_installer () {
  echo "Chinachu Installer Menu:"
  echo "[!] These are installed under all ${CHINACHU_DIR}/..."
  echo "[!] Recommend the Auto installation."
  
  local PS3 item cmd
  PS3="what do you install? > "
  select item in "Auto" "Node.js" "epgdump"
  do
    echo "selected: ${item}"
    case $item in
      "Auto" )
        cmd="chinachu_installer_auto"
        ;;
      "Node.js" )
        cmd="chinachu_installer_node"
        ;;
      "epgdump" )
        cmd="chinachu_installer_epgdump"
        ;;
      * )
        cmd="chinachu_installer"
        ;;
    esac
    $cmd && break
  done
  
  return 0
}

chinachu_installer_auto () {
  chinachu_installer_node
  chinachu_installer_epgdump
  
  return 0
}

chinachu_installer_node () {
  if [ -d "$NAVE_DIR" ]; then
    rm -rf $NAVE_DIR
  fi
  
  echo "Installing Node using Nave..."
  git clone git://github.com/isaacs/nave.git $NAVE_DIR
  ${NAVE_DIR}/nave.sh install $NODE_VER
  rm -f node
  ln -s $NODE_PATH node
  
  echo "done."
  
  return 0
}

chinachu_installer_epgdump () {

  return 0
}

chinachu_service () {
  local cmd name action
  name="$1"
  action="$2"
  case $action in
    initscript | execute )
      case $name in
        operator | wui )
          cmd="chinachu_service_$action"
          ;;
        * )
          cmd="chinachu_service_help"
          ;;
      esac
      ;;
    * )
      cmd="chinachu_service_help"
      ;;
  esac
  $cmd "$name" && return 0
}

chinachu_service_initscript () {
  local name="$1"
  
  cat <<EOF
#!/bin/sh
# /etc/

### BEGIN INIT INFO
# Provides:          chinachu-${name}
# Required-Start:    \$local_fs \$remote_fs \$network \$syslog
# Required-Stop:     \$local_fs \$remote_fs \$network \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the chinachu-${name}
# Description:       starts chinachu-${name} using start-stop-daemon
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=${CHINACHU_DIR}/chinachu
DAEMON_OPTS="service ${name} execute"
NAME=chinachu-${name}
USER=$USER
PIDFILE=/var/run/\${NAME}.pid

test -x \$DAEMON || exit 0

# set -e

start () {
  echo -n "Starting \${NAME}: "
  
  if [ -f \$PIDFILE ]; then
    PID=\`cat \$PIDFILE\`
    if [ -z "\`ps axf | grep \${PID} | grep -v grep\`" ]; then
      rm -f \$PIDFILE
    else
      echo "\${NAME} is already running? (pid=\${PID})"
      exit
    fi
  fi
  
  PID=\`su \$USER -c \"\$DAEMON \$DAEMON_OPTS > /dev/null 2>&1 & echo \$!\"\`
  
  if [ -z \$PID ]; then
    echo "Failed!"
    exit
  else
    echo \$PID > \$PIDFILE
  fi
  
  echo "OK."
}

stop () {
  echo -n "Stopping \${NAME}: "
  
  PID=\`cat \$PIDFILE\`
  if [ -f \$PIDFILE ]; then
    kill -HUP \$PID
    echo "OK."
    rm -f \$PIDFILE
  else
    echo "\${NAME} is not running? (\${PIDFILE} not found)."
  fi
}

status () {
  if [ -f \$PIDFILE ]; then
    PID=\`cat \$PIDFILE\`
    if [ -z "\`ps axf | grep \${PID} | grep -v grep\`" ]; then
      echo "\${NAME} is dead but \${PIDFILE} exists."
    else
      echo "\${NAME} is running."
    fi
  else
    echo "\${NAME} is NOT running."
  fi
}

case "\$1" in
  start )
    start "\$@"
    ;;
  stop )
    stop "\$@"
    ;;
  restart )
    stop "\$@"
    start "\$@"
    ;;
  status )
    status "\$@"
    ;;
  *)
    echo "Usage: \$NAME {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0

EOF
  
  return 0
}

chinachu_service_execute () {
  local name="$1"

  ensure_dir log
  ensure_dir data
  
  ./node app-${name}.js | tee ./log/${name} && return 0
}

chinachu_service_help () {
  cat <<EOF

Usage: ./chinachu service <name> <action>

Names:

operator    Chinachu Operator Daemon
wui         Chinachu WebUI Server Daemon

Actions:

initscript  Output a LSB init script
execute     Execute

Examples:

# Create a LSB init script and Install to system
./chinachu service operator initscript > /tmp/chinachu-operator
./chinachu service wui initscript > /tmp/chinachu-wui
sudo chown root:root /tmp/chinachu-operator /tmp/chinachu-wui
sudo chmod +x /tmp/chinachu-operator /tmp/chinachu-wui
sudo mv /tmp/chinachu-operator /tmp/chinachu-wui /etc/init.d/

EOF

  return 0
}

chinachu_help () {
  cat <<EOF

Usage: ./chinachu <cmd> ...

Commands:

installer               Run a Installer.
service <name> <action> Service-utility.
service help            Output help of Service-utility.
help                    Output this information.

EOF

  return 0
}

ensure_dir () {
  if ! [ -d "$1" ]; then
    mkdir -p -- "$1" || fail "couldn't create $1"
  fi
}

remove_dir () {
  if ! [ -d "$1" ]; then
    rm -rf -- "$1" || fail "Could not remove $1"
  fi
}

fail () {
  echo "$@" >&2
  exit 1
}

main "$@"
